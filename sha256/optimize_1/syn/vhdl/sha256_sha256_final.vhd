-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_sha256_final is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ctx_ce0 : OUT STD_LOGIC;
    ctx_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ctx_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ctx_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ctx_ce1 : OUT STD_LOGIC;
    ctx_we1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ctx_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    hash_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hash_ce0 : OUT STD_LOGIC;
    hash_we0 : OUT STD_LOGIC;
    hash_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    hash_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hash_ce1 : OUT STD_LOGIC;
    hash_we1 : OUT STD_LOGIC;
    hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256_sha256_final is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv64_80 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln128_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idxprom_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln135_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln130_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln135_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln136_fu_552_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_34_fu_558_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ctx_addr_5_reg_1152 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_4_fu_614_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln130_1_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_626_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal empty_38_fu_896_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_38_reg_1180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_cast_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_39_fu_900_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_39_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast2_reg_1195 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_40_fu_904_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_40_reg_1210 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_cast3_reg_1215 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_41_fu_908_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_41_reg_1220 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast4_reg_1225 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln158_fu_912_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln158_reg_1230 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln159_fu_942_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln159_reg_1238 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln158_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln160_fu_956_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln160_reg_1248 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln_fu_977_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln_reg_1254 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compress_fu_395_ap_start : STD_LOGIC;
    signal grp_compress_fu_395_ap_done : STD_LOGIC;
    signal grp_compress_fu_395_ap_idle : STD_LOGIC;
    signal grp_compress_fu_395_ap_ready : STD_LOGIC;
    signal grp_compress_fu_395_ctx_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compress_fu_395_ctx_ce0 : STD_LOGIC;
    signal grp_compress_fu_395_ctx_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_compress_fu_395_ctx_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_compress_fu_395_ctx_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compress_fu_395_ctx_ce1 : STD_LOGIC;
    signal grp_compress_fu_395_ctx_we1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_compress_fu_395_ctx_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_336 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_128_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_33_reg_354 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond456_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv42_in_reg_365 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_026_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_reg_383 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_compress_fu_395_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_cast18_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_1_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast20_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln131_1_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln160_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_fu_985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_6_cast19_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln162_fu_1016_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln163_fu_1042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln164_fu_1062_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln165_fu_1079_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln166_fu_1096_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_32_fu_468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_31_fu_449_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln136_fu_530_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_37_fu_578_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln131_fu_642_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln142_fu_756_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln150_5_fu_875_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln160_fu_951_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln161_fu_972_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln159_1_fu_999_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln162_fu_1008_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln163_fu_1029_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln164_fu_1051_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln165_fu_1071_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln166_fu_1088_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_441_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctx_load_cast_cast16_fu_445_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_456_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast17_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_475_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_500_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln136_fu_522_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln136_fu_526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_537_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_36_fu_570_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_cast14_cast_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_585_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln131_1_fu_610_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln131_fu_606_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln131_1_fu_632_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln131_fu_638_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln130_fu_620_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln1_fu_649_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln142_fu_664_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln_fu_668_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln142_4_fu_684_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln142_6_fu_696_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln142_8_fu_712_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln142_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln142_13_fu_752_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln142_3_fu_748_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal trunc_ln142_12_fu_744_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln142_2_fu_740_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln142_11_fu_736_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal zext_ln142_1_fu_732_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln142_10_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln142_9_fu_724_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln142_5_fu_716_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln142_7_fu_708_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln142_3_fu_700_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln142_2_fu_688_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln142_1_fu_680_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln142_6_fu_793_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln142_4_fu_781_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln142_3_fu_775_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln142_2_fu_769_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln142_1_fu_763_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln142_5_fu_787_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln143_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2_fu_805_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_865_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln3_fu_815_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_825_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_835_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_845_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_fu_855_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln159_fu_924_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln1_fu_928_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln159_fu_936_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln160_fu_946_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln161_fu_967_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln159_fu_995_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln162_fu_1004_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln162_fu_1013_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln163_fu_1025_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln1_fu_1034_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln164_fu_1047_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_cast13_fu_1021_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln164_fu_1056_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln165_fu_1067_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln165_fu_1076_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln166_fu_1084_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln166_fu_1093_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sha256_compress IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctx_ce0 : OUT STD_LOGIC;
        ctx_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ctx_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ctx_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctx_ce1 : OUT STD_LOGIC;
        ctx_we1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ctx_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_compress_fu_395 : component sha256_compress
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compress_fu_395_ap_start,
        ap_done => grp_compress_fu_395_ap_done,
        ap_idle => grp_compress_fu_395_ap_idle,
        ap_ready => grp_compress_fu_395_ap_ready,
        ctx_address0 => grp_compress_fu_395_ctx_address0,
        ctx_ce0 => grp_compress_fu_395_ctx_ce0,
        ctx_we0 => grp_compress_fu_395_ctx_we0,
        ctx_d0 => grp_compress_fu_395_ctx_d0,
        ctx_q0 => ctx_q0,
        ctx_address1 => grp_compress_fu_395_ctx_address1,
        ctx_ce1 => grp_compress_fu_395_ctx_ce1,
        ctx_we1 => grp_compress_fu_395_ctx_we1,
        ctx_d1 => grp_compress_fu_395_ctx_d1,
        ctx_q1 => ctx_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_compress_fu_395_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compress_fu_395_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_compress_fu_395_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compress_fu_395_ap_ready = ap_const_logic_1)) then 
                    grp_compress_fu_395_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_33_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond456_fu_564_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                empty_33_reg_354 <= empty_34_fu_558_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_compress_fu_395_ap_done = ap_const_logic_1))) then 
                empty_33_reg_354 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_026_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln130_fu_494_p2 = ap_const_lv1_1) and (icmp_ln128_fu_425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_026_reg_374 <= i_1_fu_431_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln130_1_fu_600_p2 = ap_const_lv1_0))) then 
                i_026_reg_374 <= i_5_fu_626_p2;
            end if; 
        end if;
    end process;

    i_128_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln135_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_128_reg_345 <= i_3_fu_516_p2;
            elsif (((icmp_ln128_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_128_reg_345 <= i_1_fu_431_p2;
            end if; 
        end if;
    end process;

    i_2_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln135_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_reg_336 <= add_ln136_fu_552_p2;
            elsif (((icmp_ln128_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_2_reg_336 <= zext_ln135_fu_490_p1;
            end if; 
        end if;
    end process;

    i_6_reg_383_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_6_reg_383 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_6_reg_383 <= add_ln158_reg_1230;
            end if; 
        end if;
    end process;

    indvars_iv42_in_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln130_fu_494_p2 = ap_const_lv1_1) and (icmp_ln128_fu_425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv42_in_reg_365 <= idxprom_fu_437_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln130_1_fu_600_p2 = ap_const_lv1_0))) then 
                indvars_iv42_in_reg_365 <= i_4_fu_614_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln158_reg_1230 <= add_ln158_fu_912_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                empty_38_reg_1180 <= empty_38_fu_896_p1;
                empty_39_reg_1190 <= empty_39_fu_900_p1;
                p_cast2_reg_1195 <= ctx_q1(63 downto 32);
                p_cast_reg_1185 <= ctx_q0(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                empty_40_reg_1210 <= empty_40_fu_904_p1;
                empty_41_reg_1220 <= empty_41_fu_908_p1;
                p_cast3_reg_1215 <= ctx_q0(63 downto 32);
                p_cast4_reg_1225 <= ctx_q1(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln158_fu_918_p2 = ap_const_lv1_0))) then
                    or_ln_reg_1254(2 downto 0) <= or_ln_fu_977_p3(2 downto 0);
                xor_ln160_reg_1248 <= xor_ln160_fu_956_p2;
                    zext_ln159_reg_1238(4 downto 3) <= zext_ln159_fu_942_p1(4 downto 3);
            end if;
        end if;
    end process;
    zext_ln159_reg_1238(2 downto 0) <= "000";
    zext_ln159_reg_1238(31 downto 5) <= "000000000000000000000000000";
    or_ln_reg_1254(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln128_fu_425_p2, ap_CS_fsm_state2, icmp_ln130_fu_494_p2, ap_CS_fsm_state3, icmp_ln135_fu_510_p2, ap_CS_fsm_state6, ap_CS_fsm_state8, icmp_ln130_1_fu_600_p2, ap_CS_fsm_state16, icmp_ln158_fu_918_p2, grp_compress_fu_395_ap_done, ap_CS_fsm_state5, exitcond456_fu_564_p2, ap_CS_fsm_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln130_fu_494_p2 = ap_const_lv1_1) and (icmp_ln128_fu_425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((icmp_ln130_fu_494_p2 = ap_const_lv1_0) and (icmp_ln128_fu_425_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln135_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_compress_fu_395_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond456_fu_564_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln130_1_fu_600_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_compress_fu_395_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln158_fu_918_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln130_fu_620_p2 <= std_logic_vector(unsigned(trunc_ln131_1_fu_610_p1) + unsigned(ap_const_lv7_1));
    add_ln131_1_fu_632_p2 <= std_logic_vector(unsigned(trunc_ln131_fu_606_p1) + unsigned(ap_const_lv3_1));
    add_ln136_fu_552_p2 <= std_logic_vector(unsigned(i_2_reg_336) + unsigned(ap_const_lv64_1));
    add_ln142_1_fu_763_p2 <= std_logic_vector(unsigned(trunc_ln142_13_fu_752_p1) + unsigned(zext_ln142_3_fu_748_p1));
    add_ln142_2_fu_769_p2 <= std_logic_vector(unsigned(trunc_ln142_12_fu_744_p1) + unsigned(zext_ln142_2_fu_740_p1));
    add_ln142_3_fu_775_p2 <= std_logic_vector(unsigned(trunc_ln142_11_fu_736_p1) + unsigned(zext_ln142_1_fu_732_p1));
    add_ln142_4_fu_781_p2 <= std_logic_vector(unsigned(trunc_ln142_10_fu_728_p1) + unsigned(shl_ln_fu_668_p3));
    add_ln142_5_fu_787_p2 <= std_logic_vector(unsigned(trunc_ln142_9_fu_724_p1) + unsigned(trunc_ln142_5_fu_716_p3));
    add_ln142_6_fu_793_p2 <= std_logic_vector(unsigned(trunc_ln142_7_fu_708_p1) + unsigned(trunc_ln142_3_fu_700_p3));
    add_ln142_fu_756_p2 <= std_logic_vector(unsigned(ctx_q0) + unsigned(zext_ln142_fu_676_p1));
    add_ln143_fu_799_p2 <= std_logic_vector(unsigned(trunc_ln142_2_fu_688_p3) + unsigned(trunc_ln142_1_fu_680_p1));
    add_ln158_fu_912_p2 <= std_logic_vector(unsigned(i_6_reg_383) + unsigned(ap_const_lv3_1));
    add_ln164_fu_1056_p2 <= std_logic_vector(unsigned(i_6_cast13_fu_1021_p1) + unsigned(ap_const_lv5_14));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ctx_addr_5_reg_1152 <= ap_const_lv64_9(4 - 1 downto 0);

    ctx_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ctx_addr_5_reg_1152, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state14, grp_compress_fu_395_ctx_address0, ap_CS_fsm_state5, ap_CS_fsm_state12, p_cast18_fu_485_p1, zext_ln136_1_fu_547_p1, p_cast20_fu_595_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ctx_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ctx_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ctx_address0 <= ctx_addr_5_reg_1152;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ctx_address0 <= p_cast20_fu_595_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctx_address0 <= zext_ln136_1_fu_547_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_address0 <= p_cast18_fu_485_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctx_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ctx_address0 <= grp_compress_fu_395_ctx_address0;
        else 
            ctx_address0 <= "XXXX";
        end if; 
    end process;


    ctx_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state14, grp_compress_fu_395_ctx_address1, ap_CS_fsm_state5, ap_CS_fsm_state12, zext_ln131_1_fu_659_p1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ctx_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ctx_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ctx_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_address1 <= zext_ln131_1_fu_659_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ctx_address1 <= grp_compress_fu_395_ctx_address1;
        else 
            ctx_address1 <= "XXXX";
        end if; 
    end process;


    ctx_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state14, grp_compress_fu_395_ctx_ce0, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ctx_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ctx_ce0 <= grp_compress_fu_395_ctx_ce0;
        else 
            ctx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state13, ap_CS_fsm_state14, grp_compress_fu_395_ctx_ce1, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ctx_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ctx_ce1 <= grp_compress_fu_395_ctx_ce1;
        else 
            ctx_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, grp_compress_fu_395_ctx_d0, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state10, empty_32_fu_468_p2, add_ln142_fu_756_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ctx_d0 <= add_ln142_fu_756_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ctx_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_d0 <= empty_32_fu_468_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ctx_d0 <= grp_compress_fu_395_ctx_d0;
        else 
            ctx_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ctx_d1_assign_proc : process(ap_CS_fsm_state8, grp_compress_fu_395_ctx_d1, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state10, or_ln150_5_fu_875_p9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ctx_d1 <= or_ln150_5_fu_875_p9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ctx_d1 <= ap_const_lv64_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ctx_d1 <= grp_compress_fu_395_ctx_d1;
        else 
            ctx_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ctx_load_cast_cast16_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_441_p1),8));

    ctx_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln135_fu_510_p2, ap_CS_fsm_state6, grp_compress_fu_395_ctx_we0, ap_CS_fsm_state5, exitcond456_fu_564_p2, ap_CS_fsm_state12, ap_CS_fsm_state10, empty_31_fu_449_p2, shl_ln136_fu_530_p2, empty_37_fu_578_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ctx_we0 <= ap_const_lv8_FF;
        elsif (((exitcond456_fu_564_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ctx_we0 <= empty_37_fu_578_p2;
        elsif (((icmp_ln135_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ctx_we0 <= shl_ln136_fu_530_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_we0 <= empty_31_fu_449_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ctx_we0 <= grp_compress_fu_395_ctx_we0;
        else 
            ctx_we0 <= ap_const_lv8_0;
        end if; 
    end process;


    ctx_we1_assign_proc : process(ap_CS_fsm_state8, icmp_ln130_1_fu_600_p2, grp_compress_fu_395_ctx_we1, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state10, shl_ln131_fu_642_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ctx_we1 <= ap_const_lv8_FF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln130_1_fu_600_p2 = ap_const_lv1_0))) then 
            ctx_we1 <= shl_ln131_fu_642_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ctx_we1 <= grp_compress_fu_395_ctx_we1;
        else 
            ctx_we1 <= ap_const_lv8_0;
        end if; 
    end process;

    empty_31_fu_449_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & ctx_load_cast_cast16_fu_445_p1(8-1 downto 0)))));
    empty_32_fu_468_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_80),to_integer(unsigned('0' & p_cast17_fu_464_p1(31-1 downto 0)))));
    empty_34_fu_558_p2 <= std_logic_vector(unsigned(empty_33_reg_354) + unsigned(ap_const_lv6_1));
    empty_36_fu_570_p1 <= empty_33_reg_354(3 - 1 downto 0);
    empty_37_fu_578_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & p_cast14_cast_fu_574_p1(8-1 downto 0)))));
    empty_38_fu_896_p1 <= ctx_q0(32 - 1 downto 0);
    empty_39_fu_900_p1 <= ctx_q1(32 - 1 downto 0);
    empty_40_fu_904_p1 <= ctx_q0(32 - 1 downto 0);
    empty_41_fu_908_p1 <= ctx_q1(32 - 1 downto 0);
    empty_fu_441_p1 <= ctx_q0(3 - 1 downto 0);
    exitcond456_fu_564_p2 <= "1" when (empty_33_reg_354 = ap_const_lv6_38) else "0";
    grp_compress_fu_395_ap_start <= grp_compress_fu_395_ap_start_reg;

    hash_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state19, zext_ln161_fu_985_p1, ap_CS_fsm_state17, zext_ln162_fu_1016_p1, ap_CS_fsm_state18, zext_ln164_fu_1062_p1, zext_ln166_fu_1096_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            hash_address0 <= zext_ln166_fu_1096_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hash_address0 <= zext_ln164_fu_1062_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            hash_address0 <= zext_ln162_fu_1016_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            hash_address0 <= zext_ln161_fu_985_p1(5 - 1 downto 0);
        else 
            hash_address0 <= "XXXXX";
        end if; 
    end process;


    hash_address1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state19, zext_ln160_fu_962_p1, i_6_cast19_fu_990_p1, ap_CS_fsm_state17, zext_ln163_fu_1042_p1, ap_CS_fsm_state18, zext_ln165_fu_1079_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            hash_address1 <= zext_ln165_fu_1079_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hash_address1 <= zext_ln163_fu_1042_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            hash_address1 <= i_6_cast19_fu_990_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            hash_address1 <= zext_ln160_fu_962_p1(5 - 1 downto 0);
        else 
            hash_address1 <= "XXXXX";
        end if; 
    end process;


    hash_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            hash_ce0 <= ap_const_logic_1;
        else 
            hash_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_ce1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            hash_ce1 <= ap_const_logic_1;
        else 
            hash_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hash_d0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state18, trunc_ln161_fu_972_p1, trunc_ln162_fu_1008_p1, trunc_ln164_fu_1051_p1, trunc_ln166_fu_1088_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            hash_d0 <= trunc_ln166_fu_1088_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hash_d0 <= trunc_ln164_fu_1051_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            hash_d0 <= trunc_ln162_fu_1008_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            hash_d0 <= trunc_ln161_fu_972_p1;
        else 
            hash_d0 <= "XXXXXXXX";
        end if; 
    end process;


    hash_d1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state18, trunc_ln160_fu_951_p1, trunc_ln159_1_fu_999_p1, trunc_ln163_fu_1029_p1, trunc_ln165_fu_1071_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            hash_d1 <= trunc_ln165_fu_1071_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            hash_d1 <= trunc_ln163_fu_1029_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            hash_d1 <= trunc_ln159_1_fu_999_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            hash_d1 <= trunc_ln160_fu_951_p1;
        else 
            hash_d1 <= "XXXXXXXX";
        end if; 
    end process;


    hash_we0_assign_proc : process(ap_CS_fsm_state16, icmp_ln158_fu_918_p2, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln158_fu_918_p2 = ap_const_lv1_0)))) then 
            hash_we0 <= ap_const_logic_1;
        else 
            hash_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_we1_assign_proc : process(ap_CS_fsm_state16, icmp_ln158_fu_918_p2, ap_CS_fsm_state19, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln158_fu_918_p2 = ap_const_lv1_0)))) then 
            hash_we1 <= ap_const_logic_1;
        else 
            hash_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_431_p2 <= std_logic_vector(unsigned(i_fu_421_p1) + unsigned(ap_const_lv32_1));
    i_3_fu_516_p2 <= std_logic_vector(unsigned(i_128_reg_345) + unsigned(ap_const_lv32_1));
    i_4_fu_614_p2 <= std_logic_vector(unsigned(indvars_iv42_in_reg_365) + unsigned(ap_const_lv64_1));
    i_5_fu_626_p2 <= std_logic_vector(unsigned(i_026_reg_374) + unsigned(ap_const_lv32_1));
    i_6_cast13_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_383),5));
    i_6_cast19_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_383),64));
    i_fu_421_p1 <= ctx_q0(32 - 1 downto 0);
    icmp_ln128_fu_425_p2 <= "1" when (unsigned(i_fu_421_p1) < unsigned(ap_const_lv32_38)) else "0";
    icmp_ln130_1_fu_600_p2 <= "1" when (i_026_reg_374 = ap_const_lv32_38) else "0";
    icmp_ln130_fu_494_p2 <= "1" when (unsigned(i_1_fu_431_p2) < unsigned(ap_const_lv32_38)) else "0";
    icmp_ln135_fu_510_p2 <= "1" when (tmp_fu_500_p4 = ap_const_lv26_0) else "0";
    icmp_ln158_fu_918_p2 <= "1" when (i_6_reg_383 = ap_const_lv3_4) else "0";
    idxprom_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_421_p1),64));
    lshr_ln159_fu_995_p2 <= std_logic_vector(shift_right(unsigned(empty_38_reg_1180),to_integer(unsigned('0' & zext_ln159_reg_1238(31-1 downto 0)))));
    lshr_ln160_fu_946_p2 <= std_logic_vector(shift_right(unsigned(p_cast_reg_1185),to_integer(unsigned('0' & zext_ln159_fu_942_p1(31-1 downto 0)))));
    lshr_ln161_fu_967_p2 <= std_logic_vector(shift_right(unsigned(empty_39_reg_1190),to_integer(unsigned('0' & zext_ln159_fu_942_p1(31-1 downto 0)))));
    lshr_ln162_fu_1004_p2 <= std_logic_vector(shift_right(unsigned(p_cast2_reg_1195),to_integer(unsigned('0' & zext_ln159_reg_1238(31-1 downto 0)))));
    lshr_ln163_fu_1025_p2 <= std_logic_vector(shift_right(unsigned(empty_40_reg_1210),to_integer(unsigned('0' & zext_ln159_reg_1238(31-1 downto 0)))));
    lshr_ln164_fu_1047_p2 <= std_logic_vector(shift_right(unsigned(p_cast3_reg_1215),to_integer(unsigned('0' & zext_ln159_reg_1238(31-1 downto 0)))));
    lshr_ln165_fu_1067_p2 <= std_logic_vector(shift_right(unsigned(empty_41_reg_1220),to_integer(unsigned('0' & zext_ln159_reg_1238(31-1 downto 0)))));
    lshr_ln166_fu_1084_p2 <= std_logic_vector(shift_right(unsigned(p_cast4_reg_1225),to_integer(unsigned('0' & zext_ln159_reg_1238(31-1 downto 0)))));
    lshr_ln1_fu_649_p4 <= add_ln130_fu_620_p2(6 downto 3);
    lshr_ln_fu_537_p4 <= i_2_reg_336(6 downto 3);
    or_ln150_5_fu_875_p9 <= (((((((add_ln143_fu_799_p2 & trunc_ln2_fu_805_p4) & tmp_2_fu_865_p4) & trunc_ln3_fu_815_p4) & tmp_9_fu_825_p4) & tmp_s_fu_835_p4) & tmp_5_fu_845_p4) & trunc_ln4_fu_855_p4);
    or_ln1_fu_1034_p3 <= (ap_const_lv2_2 & i_6_reg_383);
    or_ln_fu_977_p3 <= (ap_const_lv1_1 & i_6_reg_383);
    p_cast14_cast_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_36_fu_570_p1),8));
    p_cast17_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_456_p3),64));
    p_cast18_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_475_p4),64));
    p_cast20_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_585_p4),64));
        sext_ln162_fu_1013_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln160_reg_1248),4));

        sext_ln165_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln_reg_1254),5));

        sext_ln166_fu_1093_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln160_reg_1248),5));

    shl_ln131_fu_642_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln131_fu_638_p1(8-1 downto 0)))));
    shl_ln136_fu_530_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_1),to_integer(unsigned('0' & zext_ln136_fu_526_p1(8-1 downto 0)))));
    shl_ln1_fu_928_p3 <= (trunc_ln159_fu_924_p1 & ap_const_lv3_0);
    shl_ln_fu_668_p3 <= (trunc_ln142_fu_664_p1 & ap_const_lv3_0);
    sub_ln159_fu_936_p2 <= std_logic_vector(signed(ap_const_lv5_18) - signed(shl_ln1_fu_928_p3));
    tmp_1_fu_456_p3 <= (empty_fu_441_p1 & ap_const_lv3_0);
    tmp_2_fu_865_p4 <= add_ln142_5_fu_787_p2(23 downto 16);
    tmp_3_fu_475_p4 <= ctx_q0(6 downto 3);
    tmp_4_fu_585_p4 <= empty_33_reg_354(5 downto 3);
    tmp_5_fu_845_p4 <= add_ln142_1_fu_763_p2(55 downto 48);
    tmp_9_fu_825_p4 <= add_ln142_3_fu_775_p2(39 downto 32);
    tmp_fu_500_p4 <= i_128_reg_345(31 downto 6);
    tmp_s_fu_835_p4 <= add_ln142_2_fu_769_p2(47 downto 40);
    trunc_ln131_1_fu_610_p1 <= indvars_iv42_in_reg_365(7 - 1 downto 0);
    trunc_ln131_fu_606_p1 <= indvars_iv42_in_reg_365(3 - 1 downto 0);
    trunc_ln136_fu_522_p1 <= i_2_reg_336(3 - 1 downto 0);
    trunc_ln142_10_fu_728_p1 <= ctx_q0(32 - 1 downto 0);
    trunc_ln142_11_fu_736_p1 <= ctx_q0(40 - 1 downto 0);
    trunc_ln142_12_fu_744_p1 <= ctx_q0(48 - 1 downto 0);
    trunc_ln142_13_fu_752_p1 <= ctx_q0(56 - 1 downto 0);
    trunc_ln142_1_fu_680_p1 <= ctx_q0(8 - 1 downto 0);
    trunc_ln142_2_fu_688_p3 <= (trunc_ln142_4_fu_684_p1 & ap_const_lv3_0);
    trunc_ln142_3_fu_700_p3 <= (trunc_ln142_6_fu_696_p1 & ap_const_lv3_0);
    trunc_ln142_4_fu_684_p1 <= ctx_q1(5 - 1 downto 0);
    trunc_ln142_5_fu_716_p3 <= (trunc_ln142_8_fu_712_p1 & ap_const_lv3_0);
    trunc_ln142_6_fu_696_p1 <= ctx_q1(13 - 1 downto 0);
    trunc_ln142_7_fu_708_p1 <= ctx_q0(16 - 1 downto 0);
    trunc_ln142_8_fu_712_p1 <= ctx_q1(21 - 1 downto 0);
    trunc_ln142_9_fu_724_p1 <= ctx_q0(24 - 1 downto 0);
    trunc_ln142_fu_664_p1 <= ctx_q1(29 - 1 downto 0);
    trunc_ln159_1_fu_999_p1 <= lshr_ln159_fu_995_p2(8 - 1 downto 0);
    trunc_ln159_fu_924_p1 <= i_6_reg_383(2 - 1 downto 0);
    trunc_ln160_fu_951_p1 <= lshr_ln160_fu_946_p2(8 - 1 downto 0);
    trunc_ln161_fu_972_p1 <= lshr_ln161_fu_967_p2(8 - 1 downto 0);
    trunc_ln162_fu_1008_p1 <= lshr_ln162_fu_1004_p2(8 - 1 downto 0);
    trunc_ln163_fu_1029_p1 <= lshr_ln163_fu_1025_p2(8 - 1 downto 0);
    trunc_ln164_fu_1051_p1 <= lshr_ln164_fu_1047_p2(8 - 1 downto 0);
    trunc_ln165_fu_1071_p1 <= lshr_ln165_fu_1067_p2(8 - 1 downto 0);
    trunc_ln166_fu_1088_p1 <= lshr_ln166_fu_1084_p2(8 - 1 downto 0);
    trunc_ln2_fu_805_p4 <= add_ln142_6_fu_793_p2(15 downto 8);
    trunc_ln3_fu_815_p4 <= add_ln142_4_fu_781_p2(31 downto 24);
    trunc_ln4_fu_855_p4 <= add_ln142_fu_756_p2(63 downto 56);
    xor_ln160_fu_956_p2 <= (i_6_reg_383 xor ap_const_lv3_4);
    zext_ln131_1_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_649_p4),64));
    zext_ln131_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln131_1_fu_632_p2),8));
    zext_ln135_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_fu_431_p2),64));
    zext_ln136_1_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_537_p4),64));
    zext_ln136_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln136_fu_522_p1),8));
    zext_ln142_1_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_668_p3),40));
    zext_ln142_2_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_668_p3),48));
    zext_ln142_3_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_668_p3),56));
    zext_ln142_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_668_p3),64));
    zext_ln159_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln159_fu_936_p2),32));
    zext_ln160_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln160_fu_956_p2),64));
    zext_ln161_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_977_p3),64));
    zext_ln162_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln162_fu_1013_p1),64));
    zext_ln163_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1_fu_1034_p3),64));
    zext_ln164_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln164_fu_1056_p2),64));
    zext_ln165_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln165_fu_1076_p1),64));
    zext_ln166_fu_1096_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln166_fu_1093_p1),64));
end behav;
