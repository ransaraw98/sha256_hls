// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_sha256_final (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_address0,
        ctx_ce0,
        ctx_we0,
        ctx_d0,
        ctx_q0,
        ctx_address1,
        ctx_ce1,
        ctx_we1,
        ctx_d1,
        ctx_q1,
        hash_address0,
        hash_ce0,
        hash_we0,
        hash_d0,
        hash_address1,
        hash_ce1,
        hash_we1,
        hash_d1
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] ctx_address0;
output   ctx_ce0;
output  [7:0] ctx_we0;
output  [63:0] ctx_d0;
input  [63:0] ctx_q0;
output  [3:0] ctx_address1;
output   ctx_ce1;
output  [7:0] ctx_we1;
output  [63:0] ctx_d1;
input  [63:0] ctx_q1;
output  [4:0] hash_address0;
output   hash_ce0;
output   hash_we0;
output  [7:0] hash_d0;
output  [4:0] hash_address1;
output   hash_ce1;
output   hash_we1;
output  [7:0] hash_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] ctx_address0;
reg ctx_ce0;
reg[7:0] ctx_we0;
reg[63:0] ctx_d0;
reg[3:0] ctx_address1;
reg ctx_ce1;
reg[7:0] ctx_we1;
reg[63:0] ctx_d1;
reg[4:0] hash_address0;
reg hash_ce0;
reg hash_we0;
reg[7:0] hash_d0;
reg[4:0] hash_address1;
reg hash_ce1;
reg hash_we1;
reg[7:0] hash_d1;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln128_fu_425_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_1_fu_431_p2;
wire   [63:0] idxprom_fu_437_p1;
wire   [63:0] zext_ln135_fu_490_p1;
wire   [0:0] icmp_ln130_fu_494_p2;
wire   [31:0] i_3_fu_516_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln135_fu_510_p2;
wire   [63:0] add_ln136_fu_552_p2;
wire   [5:0] empty_34_fu_558_p2;
wire    ap_CS_fsm_state6;
wire   [3:0] ctx_addr_5_reg_1152;
wire    ap_CS_fsm_state7;
wire   [63:0] i_4_fu_614_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln130_1_fu_600_p2;
wire   [31:0] i_5_fu_626_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] empty_38_fu_896_p1;
reg   [31:0] empty_38_reg_1180;
wire    ap_CS_fsm_state14;
reg   [31:0] p_cast_reg_1185;
wire   [31:0] empty_39_fu_900_p1;
reg   [31:0] empty_39_reg_1190;
reg   [31:0] p_cast2_reg_1195;
wire   [31:0] empty_40_fu_904_p1;
reg   [31:0] empty_40_reg_1210;
wire    ap_CS_fsm_state15;
reg   [31:0] p_cast3_reg_1215;
wire   [31:0] empty_41_fu_908_p1;
reg   [31:0] empty_41_reg_1220;
reg   [31:0] p_cast4_reg_1225;
wire   [2:0] add_ln158_fu_912_p2;
reg   [2:0] add_ln158_reg_1230;
wire    ap_CS_fsm_state16;
wire   [31:0] zext_ln159_fu_942_p1;
reg   [31:0] zext_ln159_reg_1238;
wire   [0:0] icmp_ln158_fu_918_p2;
wire  signed [2:0] xor_ln160_fu_956_p2;
reg  signed [2:0] xor_ln160_reg_1248;
wire  signed [3:0] or_ln_fu_977_p3;
reg  signed [3:0] or_ln_reg_1254;
wire    grp_compress_fu_395_ap_start;
wire    grp_compress_fu_395_ap_done;
wire    grp_compress_fu_395_ap_idle;
wire    grp_compress_fu_395_ap_ready;
wire   [3:0] grp_compress_fu_395_ctx_address0;
wire    grp_compress_fu_395_ctx_ce0;
wire   [7:0] grp_compress_fu_395_ctx_we0;
wire   [63:0] grp_compress_fu_395_ctx_d0;
wire   [3:0] grp_compress_fu_395_ctx_address1;
wire    grp_compress_fu_395_ctx_ce1;
wire   [7:0] grp_compress_fu_395_ctx_we1;
wire   [63:0] grp_compress_fu_395_ctx_d1;
reg   [63:0] i_2_reg_336;
reg   [31:0] i_128_reg_345;
reg   [5:0] empty_33_reg_354;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond456_fu_564_p2;
reg   [63:0] indvars_iv42_in_reg_365;
reg   [31:0] i_026_reg_374;
reg   [2:0] i_6_reg_383;
wire    ap_CS_fsm_state19;
reg    grp_compress_fu_395_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [63:0] p_cast18_fu_485_p1;
wire   [63:0] zext_ln136_1_fu_547_p1;
wire   [63:0] p_cast20_fu_595_p1;
wire   [63:0] zext_ln131_1_fu_659_p1;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln160_fu_962_p1;
wire   [63:0] zext_ln161_fu_985_p1;
wire   [63:0] i_6_cast19_fu_990_p1;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln162_fu_1016_p1;
wire   [63:0] zext_ln163_fu_1042_p1;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln164_fu_1062_p1;
wire   [63:0] zext_ln165_fu_1079_p1;
wire   [63:0] zext_ln166_fu_1096_p1;
wire   [63:0] empty_32_fu_468_p2;
wire   [7:0] empty_31_fu_449_p2;
wire   [7:0] shl_ln136_fu_530_p2;
wire   [7:0] empty_37_fu_578_p2;
wire   [7:0] shl_ln131_fu_642_p2;
wire   [63:0] add_ln142_fu_756_p2;
wire   [63:0] or_ln150_5_fu_875_p9;
wire   [7:0] trunc_ln160_fu_951_p1;
wire   [7:0] trunc_ln161_fu_972_p1;
wire   [7:0] trunc_ln159_1_fu_999_p1;
wire   [7:0] trunc_ln162_fu_1008_p1;
wire   [7:0] trunc_ln163_fu_1029_p1;
wire   [7:0] trunc_ln164_fu_1051_p1;
wire   [7:0] trunc_ln165_fu_1071_p1;
wire   [7:0] trunc_ln166_fu_1088_p1;
wire   [31:0] i_fu_421_p1;
wire   [2:0] empty_fu_441_p1;
wire   [7:0] ctx_load_cast_cast16_fu_445_p1;
wire   [5:0] tmp_1_fu_456_p3;
wire   [63:0] p_cast17_fu_464_p1;
wire   [3:0] tmp_3_fu_475_p4;
wire   [25:0] tmp_fu_500_p4;
wire   [2:0] trunc_ln136_fu_522_p1;
wire   [7:0] zext_ln136_fu_526_p1;
wire   [3:0] lshr_ln_fu_537_p4;
wire   [2:0] empty_36_fu_570_p1;
wire   [7:0] p_cast14_cast_fu_574_p1;
wire   [2:0] tmp_4_fu_585_p4;
wire   [6:0] trunc_ln131_1_fu_610_p1;
wire   [2:0] trunc_ln131_fu_606_p1;
wire   [2:0] add_ln131_1_fu_632_p2;
wire   [7:0] zext_ln131_fu_638_p1;
wire   [6:0] add_ln130_fu_620_p2;
wire   [3:0] lshr_ln1_fu_649_p4;
wire   [28:0] trunc_ln142_fu_664_p1;
wire   [31:0] shl_ln_fu_668_p3;
wire   [4:0] trunc_ln142_4_fu_684_p1;
wire   [12:0] trunc_ln142_6_fu_696_p1;
wire   [20:0] trunc_ln142_8_fu_712_p1;
wire   [63:0] zext_ln142_fu_676_p1;
wire   [55:0] trunc_ln142_13_fu_752_p1;
wire   [55:0] zext_ln142_3_fu_748_p1;
wire   [47:0] trunc_ln142_12_fu_744_p1;
wire   [47:0] zext_ln142_2_fu_740_p1;
wire   [39:0] trunc_ln142_11_fu_736_p1;
wire   [39:0] zext_ln142_1_fu_732_p1;
wire   [31:0] trunc_ln142_10_fu_728_p1;
wire   [23:0] trunc_ln142_9_fu_724_p1;
wire   [23:0] trunc_ln142_5_fu_716_p3;
wire   [15:0] trunc_ln142_7_fu_708_p1;
wire   [15:0] trunc_ln142_3_fu_700_p3;
wire   [7:0] trunc_ln142_2_fu_688_p3;
wire   [7:0] trunc_ln142_1_fu_680_p1;
wire   [15:0] add_ln142_6_fu_793_p2;
wire   [31:0] add_ln142_4_fu_781_p2;
wire   [39:0] add_ln142_3_fu_775_p2;
wire   [47:0] add_ln142_2_fu_769_p2;
wire   [55:0] add_ln142_1_fu_763_p2;
wire   [23:0] add_ln142_5_fu_787_p2;
wire   [7:0] add_ln143_fu_799_p2;
wire   [7:0] trunc_ln2_fu_805_p4;
wire   [7:0] tmp_2_fu_865_p4;
wire   [7:0] trunc_ln3_fu_815_p4;
wire   [7:0] tmp_9_fu_825_p4;
wire   [7:0] tmp_s_fu_835_p4;
wire   [7:0] tmp_5_fu_845_p4;
wire   [7:0] trunc_ln4_fu_855_p4;
wire   [1:0] trunc_ln159_fu_924_p1;
wire   [4:0] shl_ln1_fu_928_p3;
wire   [4:0] sub_ln159_fu_936_p2;
wire   [31:0] lshr_ln160_fu_946_p2;
wire   [31:0] lshr_ln161_fu_967_p2;
wire   [31:0] lshr_ln159_fu_995_p2;
wire   [31:0] lshr_ln162_fu_1004_p2;
wire  signed [3:0] sext_ln162_fu_1013_p1;
wire   [31:0] lshr_ln163_fu_1025_p2;
wire   [4:0] or_ln1_fu_1034_p3;
wire   [31:0] lshr_ln164_fu_1047_p2;
wire   [4:0] i_6_cast13_fu_1021_p1;
wire   [4:0] add_ln164_fu_1056_p2;
wire   [31:0] lshr_ln165_fu_1067_p2;
wire  signed [4:0] sext_ln165_fu_1076_p1;
wire   [31:0] lshr_ln166_fu_1084_p2;
wire  signed [4:0] sext_ln166_fu_1093_p1;
wire    ap_CS_fsm_state20;
reg   [19:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
#0 grp_compress_fu_395_ap_start_reg = 1'b0;
end

sha256_compress grp_compress_fu_395(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compress_fu_395_ap_start),
    .ap_done(grp_compress_fu_395_ap_done),
    .ap_idle(grp_compress_fu_395_ap_idle),
    .ap_ready(grp_compress_fu_395_ap_ready),
    .ctx_address0(grp_compress_fu_395_ctx_address0),
    .ctx_ce0(grp_compress_fu_395_ctx_ce0),
    .ctx_we0(grp_compress_fu_395_ctx_we0),
    .ctx_d0(grp_compress_fu_395_ctx_d0),
    .ctx_q0(ctx_q0),
    .ctx_address1(grp_compress_fu_395_ctx_address1),
    .ctx_ce1(grp_compress_fu_395_ctx_ce1),
    .ctx_we1(grp_compress_fu_395_ctx_we1),
    .ctx_d1(grp_compress_fu_395_ctx_d1),
    .ctx_q1(ctx_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compress_fu_395_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state4))) begin
            grp_compress_fu_395_ap_start_reg <= 1'b1;
        end else if ((grp_compress_fu_395_ap_ready == 1'b1)) begin
            grp_compress_fu_395_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond456_fu_564_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        empty_33_reg_354 <= empty_34_fu_558_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_compress_fu_395_ap_done == 1'b1))) begin
        empty_33_reg_354 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_494_p2 == 1'd1) & (icmp_ln128_fu_425_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_026_reg_374 <= i_1_fu_431_p2;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln130_1_fu_600_p2 == 1'd0))) begin
        i_026_reg_374 <= i_5_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_128_reg_345 <= i_3_fu_516_p2;
    end else if (((icmp_ln128_fu_425_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_128_reg_345 <= i_1_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln135_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_336 <= add_ln136_fu_552_p2;
    end else if (((icmp_ln128_fu_425_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_2_reg_336 <= zext_ln135_fu_490_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_6_reg_383 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        i_6_reg_383 <= add_ln158_reg_1230;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_494_p2 == 1'd1) & (icmp_ln128_fu_425_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvars_iv42_in_reg_365 <= idxprom_fu_437_p1;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln130_1_fu_600_p2 == 1'd0))) begin
        indvars_iv42_in_reg_365 <= i_4_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln158_reg_1230 <= add_ln158_fu_912_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        empty_38_reg_1180 <= empty_38_fu_896_p1;
        empty_39_reg_1190 <= empty_39_fu_900_p1;
        p_cast2_reg_1195 <= {{ctx_q1[63:32]}};
        p_cast_reg_1185 <= {{ctx_q0[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        empty_40_reg_1210 <= empty_40_fu_904_p1;
        empty_41_reg_1220 <= empty_41_fu_908_p1;
        p_cast3_reg_1215 <= {{ctx_q0[63:32]}};
        p_cast4_reg_1225 <= {{ctx_q1[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln158_fu_918_p2 == 1'd0))) begin
        or_ln_reg_1254[2 : 0] <= or_ln_fu_977_p3[2 : 0];
        xor_ln160_reg_1248 <= xor_ln160_fu_956_p2;
        zext_ln159_reg_1238[4 : 3] <= zext_ln159_fu_942_p1[4 : 3];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_address0 = ctx_addr_5_reg_1152;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ctx_address0 = p_cast20_fu_595_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_address0 = zext_ln136_1_fu_547_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_address0 = p_cast18_fu_485_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_address0 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        ctx_address0 = grp_compress_fu_395_ctx_address0;
    end else begin
        ctx_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ctx_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ctx_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_address1 = zext_ln131_1_fu_659_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_address1 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        ctx_address1 = grp_compress_fu_395_ctx_address1;
    end else begin
        ctx_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ctx_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        ctx_ce0 = grp_compress_fu_395_ctx_ce0;
    end else begin
        ctx_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        ctx_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        ctx_ce1 = grp_compress_fu_395_ctx_ce1;
    end else begin
        ctx_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_d0 = add_ln142_fu_756_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        ctx_d0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_d0 = empty_32_fu_468_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        ctx_d0 = grp_compress_fu_395_ctx_d0;
    end else begin
        ctx_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_d1 = or_ln150_5_fu_875_p9;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_d1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        ctx_d1 = grp_compress_fu_395_ctx_d1;
    end else begin
        ctx_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_we0 = 8'd255;
    end else if (((exitcond456_fu_564_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ctx_we0 = empty_37_fu_578_p2;
    end else if (((icmp_ln135_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ctx_we0 = shl_ln136_fu_530_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_we0 = empty_31_fu_449_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        ctx_we0 = grp_compress_fu_395_ctx_we0;
    end else begin
        ctx_we0 = 8'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ctx_we1 = 8'd255;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln130_1_fu_600_p2 == 1'd0))) begin
        ctx_we1 = shl_ln131_fu_642_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        ctx_we1 = grp_compress_fu_395_ctx_we1;
    end else begin
        ctx_we1 = 8'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        hash_address0 = zext_ln166_fu_1096_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        hash_address0 = zext_ln164_fu_1062_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        hash_address0 = zext_ln162_fu_1016_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        hash_address0 = zext_ln161_fu_985_p1;
    end else begin
        hash_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        hash_address1 = zext_ln165_fu_1079_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        hash_address1 = zext_ln163_fu_1042_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        hash_address1 = i_6_cast19_fu_990_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        hash_address1 = zext_ln160_fu_962_p1;
    end else begin
        hash_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state16))) begin
        hash_ce0 = 1'b1;
    end else begin
        hash_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state16))) begin
        hash_ce1 = 1'b1;
    end else begin
        hash_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        hash_d0 = trunc_ln166_fu_1088_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        hash_d0 = trunc_ln164_fu_1051_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        hash_d0 = trunc_ln162_fu_1008_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        hash_d0 = trunc_ln161_fu_972_p1;
    end else begin
        hash_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        hash_d1 = trunc_ln165_fu_1071_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        hash_d1 = trunc_ln163_fu_1029_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        hash_d1 = trunc_ln159_1_fu_999_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        hash_d1 = trunc_ln160_fu_951_p1;
    end else begin
        hash_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state16) & (icmp_ln158_fu_918_p2 == 1'd0)))) begin
        hash_we0 = 1'b1;
    end else begin
        hash_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state16) & (icmp_ln158_fu_918_p2 == 1'd0)))) begin
        hash_we1 = 1'b1;
    end else begin
        hash_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln130_fu_494_p2 == 1'd1) & (icmp_ln128_fu_425_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((icmp_ln130_fu_494_p2 == 1'd0) & (icmp_ln128_fu_425_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln135_fu_510_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_compress_fu_395_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond456_fu_564_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln130_1_fu_600_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_compress_fu_395_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln158_fu_918_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln130_fu_620_p2 = (trunc_ln131_1_fu_610_p1 + 7'd1);

assign add_ln131_1_fu_632_p2 = (trunc_ln131_fu_606_p1 + 3'd1);

assign add_ln136_fu_552_p2 = (i_2_reg_336 + 64'd1);

assign add_ln142_1_fu_763_p2 = (trunc_ln142_13_fu_752_p1 + zext_ln142_3_fu_748_p1);

assign add_ln142_2_fu_769_p2 = (trunc_ln142_12_fu_744_p1 + zext_ln142_2_fu_740_p1);

assign add_ln142_3_fu_775_p2 = (trunc_ln142_11_fu_736_p1 + zext_ln142_1_fu_732_p1);

assign add_ln142_4_fu_781_p2 = (trunc_ln142_10_fu_728_p1 + shl_ln_fu_668_p3);

assign add_ln142_5_fu_787_p2 = (trunc_ln142_9_fu_724_p1 + trunc_ln142_5_fu_716_p3);

assign add_ln142_6_fu_793_p2 = (trunc_ln142_7_fu_708_p1 + trunc_ln142_3_fu_700_p3);

assign add_ln142_fu_756_p2 = (ctx_q0 + zext_ln142_fu_676_p1);

assign add_ln143_fu_799_p2 = (trunc_ln142_2_fu_688_p3 + trunc_ln142_1_fu_680_p1);

assign add_ln158_fu_912_p2 = (i_6_reg_383 + 3'd1);

assign add_ln164_fu_1056_p2 = ($signed(i_6_cast13_fu_1021_p1) + $signed(5'd20));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ctx_addr_5_reg_1152 = 64'd9;

assign ctx_load_cast_cast16_fu_445_p1 = empty_fu_441_p1;

assign empty_31_fu_449_p2 = 8'd1 << ctx_load_cast_cast16_fu_445_p1;

assign empty_32_fu_468_p2 = 64'd128 << p_cast17_fu_464_p1;

assign empty_34_fu_558_p2 = (empty_33_reg_354 + 6'd1);

assign empty_36_fu_570_p1 = empty_33_reg_354[2:0];

assign empty_37_fu_578_p2 = 8'd1 << p_cast14_cast_fu_574_p1;

assign empty_38_fu_896_p1 = ctx_q0[31:0];

assign empty_39_fu_900_p1 = ctx_q1[31:0];

assign empty_40_fu_904_p1 = ctx_q0[31:0];

assign empty_41_fu_908_p1 = ctx_q1[31:0];

assign empty_fu_441_p1 = ctx_q0[2:0];

assign exitcond456_fu_564_p2 = ((empty_33_reg_354 == 6'd56) ? 1'b1 : 1'b0);

assign grp_compress_fu_395_ap_start = grp_compress_fu_395_ap_start_reg;

assign i_1_fu_431_p2 = (i_fu_421_p1 + 32'd1);

assign i_3_fu_516_p2 = (i_128_reg_345 + 32'd1);

assign i_4_fu_614_p2 = (indvars_iv42_in_reg_365 + 64'd1);

assign i_5_fu_626_p2 = (i_026_reg_374 + 32'd1);

assign i_6_cast13_fu_1021_p1 = i_6_reg_383;

assign i_6_cast19_fu_990_p1 = i_6_reg_383;

assign i_fu_421_p1 = ctx_q0[31:0];

assign icmp_ln128_fu_425_p2 = ((i_fu_421_p1 < 32'd56) ? 1'b1 : 1'b0);

assign icmp_ln130_1_fu_600_p2 = ((i_026_reg_374 == 32'd56) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_494_p2 = ((i_1_fu_431_p2 < 32'd56) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_510_p2 = ((tmp_fu_500_p4 == 26'd0) ? 1'b1 : 1'b0);

assign icmp_ln158_fu_918_p2 = ((i_6_reg_383 == 3'd4) ? 1'b1 : 1'b0);

assign idxprom_fu_437_p1 = i_fu_421_p1;

assign lshr_ln159_fu_995_p2 = empty_38_reg_1180 >> zext_ln159_reg_1238;

assign lshr_ln160_fu_946_p2 = p_cast_reg_1185 >> zext_ln159_fu_942_p1;

assign lshr_ln161_fu_967_p2 = empty_39_reg_1190 >> zext_ln159_fu_942_p1;

assign lshr_ln162_fu_1004_p2 = p_cast2_reg_1195 >> zext_ln159_reg_1238;

assign lshr_ln163_fu_1025_p2 = empty_40_reg_1210 >> zext_ln159_reg_1238;

assign lshr_ln164_fu_1047_p2 = p_cast3_reg_1215 >> zext_ln159_reg_1238;

assign lshr_ln165_fu_1067_p2 = empty_41_reg_1220 >> zext_ln159_reg_1238;

assign lshr_ln166_fu_1084_p2 = p_cast4_reg_1225 >> zext_ln159_reg_1238;

assign lshr_ln1_fu_649_p4 = {{add_ln130_fu_620_p2[6:3]}};

assign lshr_ln_fu_537_p4 = {{i_2_reg_336[6:3]}};

assign or_ln150_5_fu_875_p9 = {{{{{{{{add_ln143_fu_799_p2}, {trunc_ln2_fu_805_p4}}, {tmp_2_fu_865_p4}}, {trunc_ln3_fu_815_p4}}, {tmp_9_fu_825_p4}}, {tmp_s_fu_835_p4}}, {tmp_5_fu_845_p4}}, {trunc_ln4_fu_855_p4}};

assign or_ln1_fu_1034_p3 = {{2'd2}, {i_6_reg_383}};

assign or_ln_fu_977_p3 = {{1'd1}, {i_6_reg_383}};

assign p_cast14_cast_fu_574_p1 = empty_36_fu_570_p1;

assign p_cast17_fu_464_p1 = tmp_1_fu_456_p3;

assign p_cast18_fu_485_p1 = tmp_3_fu_475_p4;

assign p_cast20_fu_595_p1 = tmp_4_fu_585_p4;

assign sext_ln162_fu_1013_p1 = xor_ln160_reg_1248;

assign sext_ln165_fu_1076_p1 = or_ln_reg_1254;

assign sext_ln166_fu_1093_p1 = xor_ln160_reg_1248;

assign shl_ln131_fu_642_p2 = 8'd1 << zext_ln131_fu_638_p1;

assign shl_ln136_fu_530_p2 = 8'd1 << zext_ln136_fu_526_p1;

assign shl_ln1_fu_928_p3 = {{trunc_ln159_fu_924_p1}, {3'd0}};

assign shl_ln_fu_668_p3 = {{trunc_ln142_fu_664_p1}, {3'd0}};

assign sub_ln159_fu_936_p2 = ($signed(5'd24) - $signed(shl_ln1_fu_928_p3));

assign tmp_1_fu_456_p3 = {{empty_fu_441_p1}, {3'd0}};

assign tmp_2_fu_865_p4 = {{add_ln142_5_fu_787_p2[23:16]}};

assign tmp_3_fu_475_p4 = {{ctx_q0[6:3]}};

assign tmp_4_fu_585_p4 = {{empty_33_reg_354[5:3]}};

assign tmp_5_fu_845_p4 = {{add_ln142_1_fu_763_p2[55:48]}};

assign tmp_9_fu_825_p4 = {{add_ln142_3_fu_775_p2[39:32]}};

assign tmp_fu_500_p4 = {{i_128_reg_345[31:6]}};

assign tmp_s_fu_835_p4 = {{add_ln142_2_fu_769_p2[47:40]}};

assign trunc_ln131_1_fu_610_p1 = indvars_iv42_in_reg_365[6:0];

assign trunc_ln131_fu_606_p1 = indvars_iv42_in_reg_365[2:0];

assign trunc_ln136_fu_522_p1 = i_2_reg_336[2:0];

assign trunc_ln142_10_fu_728_p1 = ctx_q0[31:0];

assign trunc_ln142_11_fu_736_p1 = ctx_q0[39:0];

assign trunc_ln142_12_fu_744_p1 = ctx_q0[47:0];

assign trunc_ln142_13_fu_752_p1 = ctx_q0[55:0];

assign trunc_ln142_1_fu_680_p1 = ctx_q0[7:0];

assign trunc_ln142_2_fu_688_p3 = {{trunc_ln142_4_fu_684_p1}, {3'd0}};

assign trunc_ln142_3_fu_700_p3 = {{trunc_ln142_6_fu_696_p1}, {3'd0}};

assign trunc_ln142_4_fu_684_p1 = ctx_q1[4:0];

assign trunc_ln142_5_fu_716_p3 = {{trunc_ln142_8_fu_712_p1}, {3'd0}};

assign trunc_ln142_6_fu_696_p1 = ctx_q1[12:0];

assign trunc_ln142_7_fu_708_p1 = ctx_q0[15:0];

assign trunc_ln142_8_fu_712_p1 = ctx_q1[20:0];

assign trunc_ln142_9_fu_724_p1 = ctx_q0[23:0];

assign trunc_ln142_fu_664_p1 = ctx_q1[28:0];

assign trunc_ln159_1_fu_999_p1 = lshr_ln159_fu_995_p2[7:0];

assign trunc_ln159_fu_924_p1 = i_6_reg_383[1:0];

assign trunc_ln160_fu_951_p1 = lshr_ln160_fu_946_p2[7:0];

assign trunc_ln161_fu_972_p1 = lshr_ln161_fu_967_p2[7:0];

assign trunc_ln162_fu_1008_p1 = lshr_ln162_fu_1004_p2[7:0];

assign trunc_ln163_fu_1029_p1 = lshr_ln163_fu_1025_p2[7:0];

assign trunc_ln164_fu_1051_p1 = lshr_ln164_fu_1047_p2[7:0];

assign trunc_ln165_fu_1071_p1 = lshr_ln165_fu_1067_p2[7:0];

assign trunc_ln166_fu_1088_p1 = lshr_ln166_fu_1084_p2[7:0];

assign trunc_ln2_fu_805_p4 = {{add_ln142_6_fu_793_p2[15:8]}};

assign trunc_ln3_fu_815_p4 = {{add_ln142_4_fu_781_p2[31:24]}};

assign trunc_ln4_fu_855_p4 = {{add_ln142_fu_756_p2[63:56]}};

assign xor_ln160_fu_956_p2 = (i_6_reg_383 ^ 3'd4);

assign zext_ln131_1_fu_659_p1 = lshr_ln1_fu_649_p4;

assign zext_ln131_fu_638_p1 = add_ln131_1_fu_632_p2;

assign zext_ln135_fu_490_p1 = i_1_fu_431_p2;

assign zext_ln136_1_fu_547_p1 = lshr_ln_fu_537_p4;

assign zext_ln136_fu_526_p1 = trunc_ln136_fu_522_p1;

assign zext_ln142_1_fu_732_p1 = shl_ln_fu_668_p3;

assign zext_ln142_2_fu_740_p1 = shl_ln_fu_668_p3;

assign zext_ln142_3_fu_748_p1 = shl_ln_fu_668_p3;

assign zext_ln142_fu_676_p1 = shl_ln_fu_668_p3;

assign zext_ln159_fu_942_p1 = sub_ln159_fu_936_p2;

assign zext_ln160_fu_962_p1 = $unsigned(xor_ln160_fu_956_p2);

assign zext_ln161_fu_985_p1 = $unsigned(or_ln_fu_977_p3);

assign zext_ln162_fu_1016_p1 = $unsigned(sext_ln162_fu_1013_p1);

assign zext_ln163_fu_1042_p1 = or_ln1_fu_1034_p3;

assign zext_ln164_fu_1062_p1 = add_ln164_fu_1056_p2;

assign zext_ln165_fu_1079_p1 = $unsigned(sext_ln165_fu_1076_p1);

assign zext_ln166_fu_1096_p1 = $unsigned(sext_ln166_fu_1093_p1);

always @ (posedge ap_clk) begin
    zext_ln159_reg_1238[2:0] <= 3'b000;
    zext_ln159_reg_1238[31:5] <= 27'b000000000000000000000000000;
    or_ln_reg_1254[3] <= 1'b1;
end

endmodule //sha256_sha256_final
