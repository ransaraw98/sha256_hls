// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha256_sha256,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.289000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=24650,HLS_SYN_LUT=107435,HLS_VERSION=2020_2}" *)

module sha256 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_address0,
        ctx_ce0,
        ctx_we0,
        ctx_d0,
        ctx_q0,
        ctx_address1,
        ctx_ce1,
        ctx_we1,
        ctx_d1,
        ctx_q1,
        text_r
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] ctx_address0;
output   ctx_ce0;
output  [7:0] ctx_we0;
output  [63:0] ctx_d0;
input  [63:0] ctx_q0;
output  [3:0] ctx_address1;
output   ctx_ce1;
output  [7:0] ctx_we1;
output  [63:0] ctx_d1;
input  [63:0] ctx_q1;
input  [7:0] text_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] ctx_address0;
reg ctx_ce0;
reg[7:0] ctx_we0;
reg[63:0] ctx_d0;
reg[3:0] ctx_address1;
reg ctx_ce1;
reg[7:0] ctx_we1;
reg[63:0] ctx_d1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state4;
wire    grp_sha256_final_fu_129_ap_start;
wire    grp_sha256_final_fu_129_ap_done;
wire    grp_sha256_final_fu_129_ap_idle;
wire    grp_sha256_final_fu_129_ap_ready;
wire   [3:0] grp_sha256_final_fu_129_ctx_address0;
wire    grp_sha256_final_fu_129_ctx_ce0;
wire   [7:0] grp_sha256_final_fu_129_ctx_we0;
wire   [63:0] grp_sha256_final_fu_129_ctx_d0;
wire   [3:0] grp_sha256_final_fu_129_ctx_address1;
wire    grp_sha256_final_fu_129_ctx_ce1;
wire   [7:0] grp_sha256_final_fu_129_ctx_we1;
wire   [63:0] grp_sha256_final_fu_129_ctx_d1;
wire   [4:0] grp_sha256_final_fu_129_hash_address0;
wire    grp_sha256_final_fu_129_hash_ce0;
wire    grp_sha256_final_fu_129_hash_we0;
wire   [7:0] grp_sha256_final_fu_129_hash_d0;
wire   [4:0] grp_sha256_final_fu_129_hash_address1;
wire    grp_sha256_final_fu_129_hash_ce1;
wire    grp_sha256_final_fu_129_hash_we1;
wire   [7:0] grp_sha256_final_fu_129_hash_d1;
wire    grp_pad_fu_136_ap_start;
wire    grp_pad_fu_136_ap_done;
wire    grp_pad_fu_136_ap_idle;
wire    grp_pad_fu_136_ap_ready;
wire   [3:0] grp_pad_fu_136_ctx_address0;
wire    grp_pad_fu_136_ctx_ce0;
wire   [7:0] grp_pad_fu_136_ctx_we0;
wire   [63:0] grp_pad_fu_136_ctx_d0;
wire   [3:0] grp_pad_fu_136_ctx_address1;
wire    grp_pad_fu_136_ctx_ce1;
wire   [7:0] grp_pad_fu_136_ctx_we1;
wire   [63:0] grp_pad_fu_136_ctx_d1;
reg    grp_sha256_final_fu_129_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg    grp_pad_fu_136_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [6:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_sha256_final_fu_129_ap_start_reg = 1'b0;
#0 grp_pad_fu_136_ap_start_reg = 1'b0;
end

sha256_buf #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_sha256_final_fu_129_hash_address0),
    .ce0(grp_sha256_final_fu_129_hash_ce0),
    .we0(grp_sha256_final_fu_129_hash_we0),
    .d0(grp_sha256_final_fu_129_hash_d0),
    .address1(grp_sha256_final_fu_129_hash_address1),
    .ce1(grp_sha256_final_fu_129_hash_ce1),
    .we1(grp_sha256_final_fu_129_hash_we1),
    .d1(grp_sha256_final_fu_129_hash_d1)
);

sha256_sha256_final grp_sha256_final_fu_129(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_final_fu_129_ap_start),
    .ap_done(grp_sha256_final_fu_129_ap_done),
    .ap_idle(grp_sha256_final_fu_129_ap_idle),
    .ap_ready(grp_sha256_final_fu_129_ap_ready),
    .ctx_address0(grp_sha256_final_fu_129_ctx_address0),
    .ctx_ce0(grp_sha256_final_fu_129_ctx_ce0),
    .ctx_we0(grp_sha256_final_fu_129_ctx_we0),
    .ctx_d0(grp_sha256_final_fu_129_ctx_d0),
    .ctx_q0(ctx_q0),
    .ctx_address1(grp_sha256_final_fu_129_ctx_address1),
    .ctx_ce1(grp_sha256_final_fu_129_ctx_ce1),
    .ctx_we1(grp_sha256_final_fu_129_ctx_we1),
    .ctx_d1(grp_sha256_final_fu_129_ctx_d1),
    .ctx_q1(ctx_q1),
    .hash_address0(grp_sha256_final_fu_129_hash_address0),
    .hash_ce0(grp_sha256_final_fu_129_hash_ce0),
    .hash_we0(grp_sha256_final_fu_129_hash_we0),
    .hash_d0(grp_sha256_final_fu_129_hash_d0),
    .hash_address1(grp_sha256_final_fu_129_hash_address1),
    .hash_ce1(grp_sha256_final_fu_129_hash_ce1),
    .hash_we1(grp_sha256_final_fu_129_hash_we1),
    .hash_d1(grp_sha256_final_fu_129_hash_d1)
);

sha256_pad grp_pad_fu_136(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pad_fu_136_ap_start),
    .ap_done(grp_pad_fu_136_ap_done),
    .ap_idle(grp_pad_fu_136_ap_idle),
    .ap_ready(grp_pad_fu_136_ap_ready),
    .ctx_address0(grp_pad_fu_136_ctx_address0),
    .ctx_ce0(grp_pad_fu_136_ctx_ce0),
    .ctx_we0(grp_pad_fu_136_ctx_we0),
    .ctx_d0(grp_pad_fu_136_ctx_d0),
    .ctx_q0(ctx_q0),
    .ctx_address1(grp_pad_fu_136_ctx_address1),
    .ctx_ce1(grp_pad_fu_136_ctx_ce1),
    .ctx_we1(grp_pad_fu_136_ctx_we1),
    .ctx_d1(grp_pad_fu_136_ctx_d1),
    .ctx_q1(ctx_q1),
    .p_read(text_r)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pad_fu_136_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_pad_fu_136_ap_start_reg <= 1'b1;
        end else if ((grp_pad_fu_136_ap_ready == 1'b1)) begin
            grp_pad_fu_136_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256_final_fu_129_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_sha256_final_fu_129_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_final_fu_129_ap_ready == 1'b1)) begin
            grp_sha256_final_fu_129_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((grp_sha256_final_fu_129_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_sha256_final_fu_129_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_address0 = grp_pad_fu_136_ctx_address0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_address0 = grp_sha256_final_fu_129_ctx_address0;
    end else begin
        ctx_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_address1 = grp_pad_fu_136_ctx_address1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_address1 = grp_sha256_final_fu_129_ctx_address1;
    end else begin
        ctx_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        ctx_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_ce0 = grp_pad_fu_136_ctx_ce0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_ce0 = grp_sha256_final_fu_129_ctx_ce0;
    end else begin
        ctx_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        ctx_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_ce1 = grp_pad_fu_136_ctx_ce1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_ce1 = grp_sha256_final_fu_129_ctx_ce1;
    end else begin
        ctx_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_d0 = 64'd6620516960021240235;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_d0 = 64'd11912009169889063794;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_d0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_d0 = grp_pad_fu_136_ctx_d0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_d0 = grp_sha256_final_fu_129_ctx_d0;
    end else begin
        ctx_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ctx_d1 = 64'd11170449402626986623;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ctx_d1 = 64'd13503953895726638695;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        ctx_d1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_d1 = grp_pad_fu_136_ctx_d1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_d1 = grp_sha256_final_fu_129_ctx_d1;
    end else begin
        ctx_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        ctx_we0 = 8'd255;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_we0 = grp_pad_fu_136_ctx_we0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_we0 = grp_sha256_final_fu_129_ctx_we0;
    end else begin
        ctx_we0 = 8'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        ctx_we1 = 8'd255;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctx_we1 = 8'd15;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ctx_we1 = grp_pad_fu_136_ctx_we1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        ctx_we1 = grp_sha256_final_fu_129_ctx_we1;
    end else begin
        ctx_we1 = 8'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_pad_fu_136_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_sha256_final_fu_129_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign grp_pad_fu_136_ap_start = grp_pad_fu_136_ap_start_reg;

assign grp_sha256_final_fu_129_ap_start = grp_sha256_final_fu_129_ap_start_reg;

endmodule //sha256
