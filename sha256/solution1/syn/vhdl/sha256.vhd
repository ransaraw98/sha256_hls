-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctx_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ctx_ce0 : OUT STD_LOGIC;
    ctx_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ctx_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ctx_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    ctx_ce1 : OUT STD_LOGIC;
    ctx_we1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ctx_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ctx_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    text_r : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256_sha256,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.289000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=24650,HLS_SYN_LUT=107435,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv64_BB67AE856A09E667 : STD_LOGIC_VECTOR (63 downto 0) := "1011101101100111101011101000010101101010000010011110011001100111";
    constant ap_const_lv64_A54FF53A3C6EF372 : STD_LOGIC_VECTOR (63 downto 0) := "1010010101001111111101010011101000111100011011101111001101110010";
    constant ap_const_lv64_9B05688C510E527F : STD_LOGIC_VECTOR (63 downto 0) := "1001101100000101011010001000110001010001000011100101001001111111";
    constant ap_const_lv64_5BE0CD191F83D9AB : STD_LOGIC_VECTOR (63 downto 0) := "0101101111100000110011010001100100011111100000111101100110101011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_sha256_final_fu_129_ap_start : STD_LOGIC;
    signal grp_sha256_final_fu_129_ap_done : STD_LOGIC;
    signal grp_sha256_final_fu_129_ap_idle : STD_LOGIC;
    signal grp_sha256_final_fu_129_ap_ready : STD_LOGIC;
    signal grp_sha256_final_fu_129_ctx_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_final_fu_129_ctx_ce0 : STD_LOGIC;
    signal grp_sha256_final_fu_129_ctx_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_129_ctx_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha256_final_fu_129_ctx_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha256_final_fu_129_ctx_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_129_ctx_we1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_129_ctx_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha256_final_fu_129_hash_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sha256_final_fu_129_hash_ce0 : STD_LOGIC;
    signal grp_sha256_final_fu_129_hash_we0 : STD_LOGIC;
    signal grp_sha256_final_fu_129_hash_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_final_fu_129_hash_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sha256_final_fu_129_hash_ce1 : STD_LOGIC;
    signal grp_sha256_final_fu_129_hash_we1 : STD_LOGIC;
    signal grp_sha256_final_fu_129_hash_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pad_fu_136_ap_start : STD_LOGIC;
    signal grp_pad_fu_136_ap_done : STD_LOGIC;
    signal grp_pad_fu_136_ap_idle : STD_LOGIC;
    signal grp_pad_fu_136_ap_ready : STD_LOGIC;
    signal grp_pad_fu_136_ctx_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pad_fu_136_ctx_ce0 : STD_LOGIC;
    signal grp_pad_fu_136_ctx_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pad_fu_136_ctx_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pad_fu_136_ctx_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_pad_fu_136_ctx_ce1 : STD_LOGIC;
    signal grp_pad_fu_136_ctx_we1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_pad_fu_136_ctx_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sha256_final_fu_129_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_pad_fu_136_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sha256_sha256_final IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctx_ce0 : OUT STD_LOGIC;
        ctx_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ctx_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ctx_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctx_ce1 : OUT STD_LOGIC;
        ctx_we1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ctx_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        hash_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        hash_ce0 : OUT STD_LOGIC;
        hash_we0 : OUT STD_LOGIC;
        hash_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        hash_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        hash_ce1 : OUT STD_LOGIC;
        hash_we1 : OUT STD_LOGIC;
        hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_pad IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctx_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctx_ce0 : OUT STD_LOGIC;
        ctx_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ctx_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ctx_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        ctx_ce1 : OUT STD_LOGIC;
        ctx_we1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ctx_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ctx_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_buf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    buf_U : component sha256_buf
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_sha256_final_fu_129_hash_address0,
        ce0 => grp_sha256_final_fu_129_hash_ce0,
        we0 => grp_sha256_final_fu_129_hash_we0,
        d0 => grp_sha256_final_fu_129_hash_d0,
        address1 => grp_sha256_final_fu_129_hash_address1,
        ce1 => grp_sha256_final_fu_129_hash_ce1,
        we1 => grp_sha256_final_fu_129_hash_we1,
        d1 => grp_sha256_final_fu_129_hash_d1);

    grp_sha256_final_fu_129 : component sha256_sha256_final
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha256_final_fu_129_ap_start,
        ap_done => grp_sha256_final_fu_129_ap_done,
        ap_idle => grp_sha256_final_fu_129_ap_idle,
        ap_ready => grp_sha256_final_fu_129_ap_ready,
        ctx_address0 => grp_sha256_final_fu_129_ctx_address0,
        ctx_ce0 => grp_sha256_final_fu_129_ctx_ce0,
        ctx_we0 => grp_sha256_final_fu_129_ctx_we0,
        ctx_d0 => grp_sha256_final_fu_129_ctx_d0,
        ctx_q0 => ctx_q0,
        ctx_address1 => grp_sha256_final_fu_129_ctx_address1,
        ctx_ce1 => grp_sha256_final_fu_129_ctx_ce1,
        ctx_we1 => grp_sha256_final_fu_129_ctx_we1,
        ctx_d1 => grp_sha256_final_fu_129_ctx_d1,
        ctx_q1 => ctx_q1,
        hash_address0 => grp_sha256_final_fu_129_hash_address0,
        hash_ce0 => grp_sha256_final_fu_129_hash_ce0,
        hash_we0 => grp_sha256_final_fu_129_hash_we0,
        hash_d0 => grp_sha256_final_fu_129_hash_d0,
        hash_address1 => grp_sha256_final_fu_129_hash_address1,
        hash_ce1 => grp_sha256_final_fu_129_hash_ce1,
        hash_we1 => grp_sha256_final_fu_129_hash_we1,
        hash_d1 => grp_sha256_final_fu_129_hash_d1);

    grp_pad_fu_136 : component sha256_pad
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pad_fu_136_ap_start,
        ap_done => grp_pad_fu_136_ap_done,
        ap_idle => grp_pad_fu_136_ap_idle,
        ap_ready => grp_pad_fu_136_ap_ready,
        ctx_address0 => grp_pad_fu_136_ctx_address0,
        ctx_ce0 => grp_pad_fu_136_ctx_ce0,
        ctx_we0 => grp_pad_fu_136_ctx_we0,
        ctx_d0 => grp_pad_fu_136_ctx_d0,
        ctx_q0 => ctx_q0,
        ctx_address1 => grp_pad_fu_136_ctx_address1,
        ctx_ce1 => grp_pad_fu_136_ctx_ce1,
        ctx_we1 => grp_pad_fu_136_ctx_we1,
        ctx_d1 => grp_pad_fu_136_ctx_d1,
        ctx_q1 => ctx_q1,
        p_read => text_r);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pad_fu_136_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pad_fu_136_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_pad_fu_136_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pad_fu_136_ap_ready = ap_const_logic_1)) then 
                    grp_pad_fu_136_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256_final_fu_129_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha256_final_fu_129_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_sha256_final_fu_129_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_final_fu_129_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_final_fu_129_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_sha256_final_fu_129_ap_done, grp_pad_fu_136_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_pad_fu_136_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_sha256_final_fu_129_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(grp_sha256_final_fu_129_ap_done, ap_CS_fsm_state7)
    begin
        if (((grp_sha256_final_fu_129_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_sha256_final_fu_129_ap_done, ap_CS_fsm_state7)
    begin
        if (((grp_sha256_final_fu_129_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ctx_address0_assign_proc : process(ap_CS_fsm_state1, grp_sha256_final_fu_129_ctx_address0, grp_pad_fu_136_ctx_address0, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctx_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctx_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_address0 <= grp_pad_fu_136_ctx_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_address0 <= grp_sha256_final_fu_129_ctx_address0;
        else 
            ctx_address0 <= "XXXX";
        end if; 
    end process;


    ctx_address1_assign_proc : process(ap_CS_fsm_state1, grp_sha256_final_fu_129_ctx_address1, grp_pad_fu_136_ctx_address1, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctx_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctx_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_address1 <= grp_pad_fu_136_ctx_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_address1 <= grp_sha256_final_fu_129_ctx_address1;
        else 
            ctx_address1 <= "XXXX";
        end if; 
    end process;


    ctx_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sha256_final_fu_129_ctx_ce0, grp_pad_fu_136_ctx_ce0, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            ctx_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_ce0 <= grp_pad_fu_136_ctx_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_ce0 <= grp_sha256_final_fu_129_ctx_ce0;
        else 
            ctx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sha256_final_fu_129_ctx_ce1, grp_pad_fu_136_ctx_ce1, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            ctx_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_ce1 <= grp_pad_fu_136_ctx_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_ce1 <= grp_sha256_final_fu_129_ctx_ce1;
        else 
            ctx_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_d0_assign_proc : process(ap_CS_fsm_state1, grp_sha256_final_fu_129_ctx_d0, grp_pad_fu_136_ctx_d0, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctx_d0 <= ap_const_lv64_5BE0CD191F83D9AB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_d0 <= ap_const_lv64_A54FF53A3C6EF372;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctx_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_d0 <= grp_pad_fu_136_ctx_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_d0 <= grp_sha256_final_fu_129_ctx_d0;
        else 
            ctx_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ctx_d1_assign_proc : process(ap_CS_fsm_state1, grp_sha256_final_fu_129_ctx_d1, grp_pad_fu_136_ctx_d1, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ctx_d1 <= ap_const_lv64_9B05688C510E527F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctx_d1 <= ap_const_lv64_BB67AE856A09E667;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            ctx_d1 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_d1 <= grp_pad_fu_136_ctx_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_d1 <= grp_sha256_final_fu_129_ctx_d1;
        else 
            ctx_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ctx_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sha256_final_fu_129_ctx_we0, grp_pad_fu_136_ctx_we0, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            ctx_we0 <= ap_const_lv8_FF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_we0 <= grp_pad_fu_136_ctx_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_we0 <= grp_sha256_final_fu_129_ctx_we0;
        else 
            ctx_we0 <= ap_const_lv8_0;
        end if; 
    end process;


    ctx_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sha256_final_fu_129_ctx_we1, grp_pad_fu_136_ctx_we1, ap_CS_fsm_state7, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctx_we1 <= ap_const_lv8_FF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            ctx_we1 <= ap_const_lv8_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ctx_we1 <= grp_pad_fu_136_ctx_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ctx_we1 <= grp_sha256_final_fu_129_ctx_we1;
        else 
            ctx_we1 <= ap_const_lv8_0;
        end if; 
    end process;

    grp_pad_fu_136_ap_start <= grp_pad_fu_136_ap_start_reg;
    grp_sha256_final_fu_129_ap_start <= grp_sha256_final_fu_129_ap_start_reg;
end behav;
