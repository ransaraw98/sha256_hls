-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stateREG_i : IN STD_LOGIC_VECTOR (31 downto 0);
    stateREG_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    stateREG_o_ap_vld : OUT STD_LOGIC;
    data : IN STD_LOGIC_VECTOR (7 downto 0);
    hash_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hash_ce0 : OUT STD_LOGIC;
    hash_we0 : OUT STD_LOGIC;
    hash_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    hash_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    hash_ce1 : OUT STD_LOGIC;
    hash_we1 : OUT STD_LOGIC;
    hash_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of sha256 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256_sha256,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.643000,HLS_SYN_LAT=153,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=416,HLS_SYN_LUT=1404,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_ce0 : STD_LOGIC;
    signal k_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_397 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_409 : STD_LOGIC_VECTOR (6 downto 0);
    signal a_3_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln22_1_fu_442_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln22_1_reg_1147 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln20_fu_454_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln23_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1160 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln23_fu_477_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_reg_1164 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal a_reg_1232 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln37_fu_695_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln37_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_1243 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_2_fu_1007_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal add_ln52_fu_1018_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln52_reg_1262 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln66_fu_1023_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln66_reg_1267 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln67_1_fu_1062_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln67_1_reg_1275 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln66_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln68_fu_1066_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln68_reg_1280 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln3_fu_1077_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln3_reg_1286 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_flush_enable : STD_LOGIC;
    signal m_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_ce0 : STD_LOGIC;
    signal m_we0 : STD_LOGIC;
    signal m_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_ce1 : STD_LOGIC;
    signal m_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_address2 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_ce2 : STD_LOGIC;
    signal m_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_address3 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_ce3 : STD_LOGIC;
    signal m_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_address4 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_ce4 : STD_LOGIC;
    signal m_q4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_386 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln20_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_i_1_phi_fu_401_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal r_reg_430 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_cast_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_2_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_3_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast15_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln68_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_cast16_fu_1090_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln70_fu_1098_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_fu_1115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln72_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_fu_1134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_fu_1142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_1_fu_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal g_fu_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_fu_995_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_fu_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_1_fu_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_6_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_13_fu_483_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_fu_487_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_1_fu_498_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_2_fu_509_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_3_fu_520_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln24_fu_546_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln_fu_536_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln24_1_fu_568_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lshr_ln24_1_fu_558_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln24_2_fu_580_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln24_4_fu_590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln24_1_fu_572_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln24_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln24_2_fu_616_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln24_3_fu_606_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln24_3_fu_638_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal lshr_ln24_4_fu_628_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln24_5_fu_650_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln24_5_fu_660_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln24_3_fu_642_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln24_2_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln24_2_fu_620_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln24_1_fu_600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln24_3_fu_670_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_5_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_4_fu_676_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln38_fu_777_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln1_fu_767_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln38_1_fu_799_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln38_1_fu_789_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal trunc_ln38_2_fu_821_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal lshr_ln38_2_fu_811_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln1_fu_781_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln38_1_fu_803_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln38_fu_833_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln38_2_fu_825_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln38_2_fu_851_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln38_1_fu_857_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln38_fu_845_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln38_3_fu_863_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln38_1_fu_839_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_1_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_2_fu_881_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_fu_869_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln39_fu_903_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln2_fu_893_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln39_1_fu_925_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln39_1_fu_915_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln39_2_fu_947_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal lshr_ln39_2_fu_937_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln2_fu_907_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln39_1_fu_929_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln39_fu_959_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln39_2_fu_951_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln39_2_fu_971_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln39_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln39_1_fu_983_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t1_fu_887_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln39_1_fu_965_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln47_fu_1001_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln39_3_fu_989_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln67_fu_1035_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_1039_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln67_fu_1047_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln67_fu_1053_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln67_fu_1057_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln70_fu_1095_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln4_fu_1107_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_cast14_fu_1103_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln72_fu_1120_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln73_fu_1131_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln74_fu_1139_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha256_k IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha256_m IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address4 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    k_U : component sha256_k
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => k_address0,
        ce0 => k_ce0,
        q0 => k_q0);

    m_U : component sha256_m
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => m_address0,
        ce0 => m_ce0,
        we0 => m_we0,
        d0 => m_d0,
        q0 => m_q0,
        address1 => m_address1,
        ce1 => m_ce1,
        q1 => m_q1,
        address2 => m_address2,
        ce2 => m_ce2,
        q2 => m_q2,
        address3 => m_address3,
        ce3 => m_ce3,
        q3 => m_q3,
        address4 => m_address4,
        ce4 => m_ce4,
        q4 => m_q4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp2_flush_enable)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_3_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                a_3_reg_420 <= stateREG_i;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln37_reg_1243 = ap_const_lv1_0))) then 
                a_3_reg_420 <= a_2_fu_1007_p2;
            end if; 
        end if;
    end process;

    i_1_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_397 <= ap_const_lv7_10;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln23_reg_1160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                i_1_reg_397 <= add_ln23_reg_1164;
            end if; 
        end if;
    end process;

    i_2_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_2_reg_409 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln37_fu_701_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
                i_2_reg_409 <= add_ln37_fu_695_p2;
            end if; 
        end if;
    end process;

    i_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_386 <= ap_const_lv5_0;
            elsif (((icmp_ln20_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_386 <= add_ln20_fu_454_p2;
            end if; 
        end if;
    end process;

    r_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                r_reg_430 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                r_reg_430 <= add_ln66_reg_1267;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                a_reg_1232 <= stateREG_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln23_fu_471_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln23_reg_1164 <= add_ln23_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln52_reg_1262 <= add_ln52_fu_1018_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln66_reg_1267 <= add_ln66_fu_1023_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1))) then
                c_fu_204 <= a_3_reg_420;
                d_1_fu_200 <= c_fu_204;
                d_fu_196 <= d_1_fu_200;
                g_fu_188 <= f_fu_192;
                h_1_fu_184 <= g_fu_188;
                h_fu_180 <= h_1_fu_184;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln37_reg_1243 = ap_const_lv1_0))) then
                f_fu_192 <= e_fu_995_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln23_reg_1160 <= icmp_ln23_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln37_reg_1243 <= icmp_ln37_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                or_ln22_1_reg_1147 <= or_ln22_1_fu_442_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln66_fu_1029_p2 = ap_const_lv1_0))) then
                    or_ln3_reg_1286(2 downto 0) <= or_ln3_fu_1077_p3(2 downto 0);
                trunc_ln67_1_reg_1275 <= trunc_ln67_1_fu_1062_p1;
                xor_ln68_reg_1280 <= xor_ln68_fu_1066_p2;
            end if;
        end if;
    end process;
    or_ln3_reg_1286(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln23_fu_471_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state10, icmp_ln66_fu_1029_p2, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, icmp_ln20_fu_460_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln20_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln23_fu_471_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln23_fu_471_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln66_fu_1029_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    a_2_fu_1007_p2 <= std_logic_vector(unsigned(add_ln47_fu_1001_p2) + unsigned(xor_ln39_3_fu_989_p2));
    add_ln20_fu_454_p2 <= std_logic_vector(unsigned(i_reg_386) + unsigned(ap_const_lv5_1));
    add_ln23_fu_477_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_401_p4) + unsigned(ap_const_lv7_1));
    add_ln24_1_fu_498_p2 <= std_logic_vector(unsigned(empty_13_fu_483_p1) + unsigned(ap_const_lv6_39));
    add_ln24_2_fu_509_p2 <= std_logic_vector(unsigned(empty_13_fu_483_p1) + unsigned(ap_const_lv6_31));
    add_ln24_3_fu_520_p2 <= std_logic_vector(unsigned(empty_13_fu_483_p1) + unsigned(ap_const_lv6_30));
    add_ln24_4_fu_676_p2 <= std_logic_vector(unsigned(m_q3) + unsigned(m_q1));
    add_ln24_5_fu_682_p2 <= std_logic_vector(unsigned(xor_ln24_1_fu_600_p2) + unsigned(xor_ln24_3_fu_670_p2));
    add_ln24_6_fu_688_p2 <= std_logic_vector(unsigned(add_ln24_5_fu_682_p2) + unsigned(add_ln24_4_fu_676_p2));
    add_ln24_fu_487_p2 <= std_logic_vector(unsigned(empty_13_fu_483_p1) + unsigned(ap_const_lv6_3E));
    add_ln37_fu_695_p2 <= std_logic_vector(unsigned(i_2_reg_409) + unsigned(ap_const_lv7_1));
    add_ln38_1_fu_875_p2 <= std_logic_vector(unsigned(xor_ln38_3_fu_863_p2) + unsigned(xor_ln38_1_fu_839_p2));
    add_ln38_2_fu_881_p2 <= std_logic_vector(unsigned(add_ln38_1_fu_875_p2) + unsigned(h_fu_180));
    add_ln38_fu_869_p2 <= std_logic_vector(unsigned(k_q0) + unsigned(m_q0));
    add_ln47_fu_1001_p2 <= std_logic_vector(unsigned(xor_ln39_1_fu_965_p2) + unsigned(t1_fu_887_p2));
    add_ln52_fu_1018_p2 <= std_logic_vector(unsigned(a_reg_1232) + unsigned(a_3_reg_420));
    add_ln66_fu_1023_p2 <= std_logic_vector(unsigned(r_reg_430) + unsigned(ap_const_lv3_1));
    add_ln72_fu_1120_p2 <= std_logic_vector(unsigned(r_cast14_fu_1103_p1) + unsigned(ap_const_lv5_14));
    and_ln38_1_fu_857_p2 <= (xor_ln38_2_fu_851_p2 and h_1_fu_184);
    and_ln38_fu_845_p2 <= (g_fu_188 and f_fu_192);
    and_ln39_1_fu_983_p2 <= (d_1_fu_200 and c_fu_204);
    and_ln39_fu_977_p2 <= (xor_ln39_2_fu_971_p2 and a_3_reg_420);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state4_assign_proc : process(icmp_ln23_fu_471_p2)
    begin
        if ((icmp_ln23_fu_471_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_flush_enable_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln37_fu_701_p2, ap_block_pp2_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln37_fu_701_p2 = ap_const_lv1_1))) then 
            ap_condition_pp2_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp2_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_401_p4_assign_proc : process(i_1_reg_397, icmp_ln23_reg_1160, ap_CS_fsm_pp1_stage0, add_ln23_reg_1164, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln23_reg_1160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_1_phi_fu_401_p4 <= add_ln23_reg_1164;
        else 
            ap_phi_mux_i_1_phi_fu_401_p4 <= i_1_reg_397;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    e_fu_995_p2 <= std_logic_vector(unsigned(t1_fu_887_p2) + unsigned(d_fu_196));
    empty_13_fu_483_p1 <= ap_phi_mux_i_1_phi_fu_401_p4(6 - 1 downto 0);

    hash_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state13, zext_ln69_fu_1085_p1, ap_CS_fsm_state11, zext_ln70_fu_1098_p1, ap_CS_fsm_state12, zext_ln72_fu_1126_p1, zext_ln74_fu_1142_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_address0 <= zext_ln74_fu_1142_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_address0 <= zext_ln72_fu_1126_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hash_address0 <= zext_ln70_fu_1098_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hash_address0 <= zext_ln69_fu_1085_p1(5 - 1 downto 0);
        else 
            hash_address0 <= "XXXXX";
        end if; 
    end process;


    hash_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state13, zext_ln68_fu_1072_p1, r_cast16_fu_1090_p1, ap_CS_fsm_state11, zext_ln71_fu_1115_p1, ap_CS_fsm_state12, zext_ln73_fu_1134_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            hash_address1 <= zext_ln73_fu_1134_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            hash_address1 <= zext_ln71_fu_1115_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hash_address1 <= r_cast16_fu_1090_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            hash_address1 <= zext_ln68_fu_1072_p1(5 - 1 downto 0);
        else 
            hash_address1 <= "XXXXX";
        end if; 
    end process;


    hash_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            hash_ce0 <= ap_const_logic_1;
        else 
            hash_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            hash_ce1 <= ap_const_logic_1;
        else 
            hash_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    hash_d0 <= ap_const_lv8_0;

    hash_d1_assign_proc : process(ap_CS_fsm_state10, trunc_ln67_1_reg_1275, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            hash_d1 <= trunc_ln67_1_reg_1275;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            hash_d1 <= ap_const_lv8_0;
        else 
            hash_d1 <= "XXXXXXXX";
        end if; 
    end process;


    hash_we0_assign_proc : process(ap_CS_fsm_state10, icmp_ln66_fu_1029_p2, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln66_fu_1029_p2 = ap_const_lv1_0)))) then 
            hash_we0 <= ap_const_logic_1;
        else 
            hash_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hash_we1_assign_proc : process(ap_CS_fsm_state10, icmp_ln66_fu_1029_p2, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln66_fu_1029_p2 = ap_const_lv1_0)))) then 
            hash_we1 <= ap_const_logic_1;
        else 
            hash_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_cast15_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_397),64));
    i_2_cast_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_409),64));
    i_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_386),64));
    icmp_ln20_fu_460_p2 <= "1" when (i_reg_386 = ap_const_lv5_10) else "0";
    icmp_ln23_fu_471_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_401_p4 = ap_const_lv7_40) else "0";
    icmp_ln37_fu_701_p2 <= "1" when (i_2_reg_409 = ap_const_lv7_40) else "0";
    icmp_ln66_fu_1029_p2 <= "1" when (r_reg_430 = ap_const_lv3_4) else "0";
    k_address0 <= i_2_cast_fu_707_p1(6 - 1 downto 0);

    k_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            k_ce0 <= ap_const_logic_1;
        else 
            k_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1_fu_767_p4 <= f_fu_192(31 downto 6);
    lshr_ln24_1_fu_558_p4 <= m_q4(31 downto 19);
    lshr_ln24_2_fu_580_p4 <= m_q4(31 downto 10);
    lshr_ln24_3_fu_606_p4 <= m_q2(31 downto 7);
    lshr_ln24_4_fu_628_p4 <= m_q2(31 downto 18);
    lshr_ln24_5_fu_650_p4 <= m_q2(31 downto 3);
    lshr_ln2_fu_893_p4 <= a_3_reg_420(31 downto 2);
    lshr_ln38_1_fu_789_p4 <= f_fu_192(31 downto 11);
    lshr_ln38_2_fu_811_p4 <= f_fu_192(31 downto 25);
    lshr_ln39_1_fu_915_p4 <= a_3_reg_420(31 downto 13);
    lshr_ln39_2_fu_937_p4 <= a_3_reg_420(31 downto 22);
    lshr_ln67_fu_1057_p2 <= std_logic_vector(shift_right(unsigned(add_ln52_reg_1262),to_integer(unsigned('0' & zext_ln67_fu_1053_p1(31-1 downto 0)))));
    lshr_ln_fu_536_p4 <= m_q4(31 downto 17);

    m_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, i_cast_fu_466_p1, i_1_cast15_fu_531_p1, i_2_cast_fu_707_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            m_address0 <= i_2_cast_fu_707_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            m_address0 <= i_1_cast15_fu_531_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            m_address0 <= i_cast_fu_466_p1(6 - 1 downto 0);
        else 
            m_address0 <= "XXXXXX";
        end if; 
    end process;

    m_address1 <= zext_ln24_3_fu_526_p1(6 - 1 downto 0);
    m_address2 <= zext_ln24_2_fu_515_p1(6 - 1 downto 0);
    m_address3 <= zext_ln24_1_fu_504_p1(6 - 1 downto 0);
    m_address4 <= zext_ln24_fu_493_p1(6 - 1 downto 0);

    m_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            m_ce1 <= ap_const_logic_1;
        else 
            m_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    m_ce2_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            m_ce2 <= ap_const_logic_1;
        else 
            m_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    m_ce3_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            m_ce3 <= ap_const_logic_1;
        else 
            m_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    m_ce4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            m_ce4 <= ap_const_logic_1;
        else 
            m_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    m_d0_assign_proc : process(or_ln22_1_reg_1147, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, add_ln24_6_fu_688_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            m_d0 <= add_ln24_6_fu_688_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            m_d0 <= or_ln22_1_reg_1147;
        else 
            m_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_reg_1160, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, icmp_ln20_fu_460_p2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln23_reg_1160 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)) or ((icmp_ln20_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_we0 <= ap_const_logic_1;
        else 
            m_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1_fu_781_p3 <= (trunc_ln38_fu_777_p1 & lshr_ln1_fu_767_p4);
    or_ln22_1_fu_442_p5 <= (((data & data) & data) & data);
    or_ln24_1_fu_572_p3 <= (trunc_ln24_1_fu_568_p1 & lshr_ln24_1_fu_558_p4);
    or_ln24_2_fu_620_p3 <= (trunc_ln24_2_fu_616_p1 & lshr_ln24_3_fu_606_p4);
    or_ln24_3_fu_642_p3 <= (trunc_ln24_3_fu_638_p1 & lshr_ln24_4_fu_628_p4);
    or_ln2_fu_907_p3 <= (trunc_ln39_fu_903_p1 & lshr_ln2_fu_893_p4);
    or_ln38_1_fu_803_p3 <= (trunc_ln38_1_fu_799_p1 & lshr_ln38_1_fu_789_p4);
    or_ln38_2_fu_825_p3 <= (trunc_ln38_2_fu_821_p1 & lshr_ln38_2_fu_811_p4);
    or_ln39_1_fu_929_p3 <= (trunc_ln39_1_fu_925_p1 & lshr_ln39_1_fu_915_p4);
    or_ln39_2_fu_951_p3 <= (trunc_ln39_2_fu_947_p1 & lshr_ln39_2_fu_937_p4);
    or_ln3_fu_1077_p3 <= (ap_const_lv1_1 & r_reg_430);
    or_ln4_fu_1107_p3 <= (ap_const_lv2_2 & r_reg_430);
    or_ln_fu_550_p3 <= (trunc_ln24_fu_546_p1 & lshr_ln_fu_536_p4);
    r_cast14_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_430),5));
    r_cast16_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_430),64));
        sext_ln70_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln68_reg_1280),4));

        sext_ln73_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln3_reg_1286),5));

        sext_ln74_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln68_reg_1280),5));

    shl_ln_fu_1039_p3 <= (trunc_ln67_fu_1035_p1 & ap_const_lv3_0);
    stateREG_o <= ap_const_lv32_0;

    stateREG_o_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            stateREG_o_ap_vld <= ap_const_logic_1;
        else 
            stateREG_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln67_fu_1047_p2 <= std_logic_vector(signed(ap_const_lv5_18) - signed(shl_ln_fu_1039_p3));
    t1_fu_887_p2 <= std_logic_vector(unsigned(add_ln38_2_fu_881_p2) + unsigned(add_ln38_fu_869_p2));
    trunc_ln24_1_fu_568_p1 <= m_q4(19 - 1 downto 0);
    trunc_ln24_2_fu_616_p1 <= m_q2(7 - 1 downto 0);
    trunc_ln24_3_fu_638_p1 <= m_q2(18 - 1 downto 0);
    trunc_ln24_fu_546_p1 <= m_q4(17 - 1 downto 0);
    trunc_ln38_1_fu_799_p1 <= f_fu_192(11 - 1 downto 0);
    trunc_ln38_2_fu_821_p1 <= f_fu_192(25 - 1 downto 0);
    trunc_ln38_fu_777_p1 <= f_fu_192(6 - 1 downto 0);
    trunc_ln39_1_fu_925_p1 <= a_3_reg_420(13 - 1 downto 0);
    trunc_ln39_2_fu_947_p1 <= a_3_reg_420(22 - 1 downto 0);
    trunc_ln39_fu_903_p1 <= a_3_reg_420(2 - 1 downto 0);
    trunc_ln67_1_fu_1062_p1 <= lshr_ln67_fu_1057_p2(8 - 1 downto 0);
    trunc_ln67_fu_1035_p1 <= r_reg_430(2 - 1 downto 0);
    xor_ln24_1_fu_600_p2 <= (xor_ln24_fu_594_p2 xor or_ln_fu_550_p3);
    xor_ln24_2_fu_664_p2 <= (zext_ln24_5_fu_660_p1 xor or_ln24_3_fu_642_p3);
    xor_ln24_3_fu_670_p2 <= (xor_ln24_2_fu_664_p2 xor or_ln24_2_fu_620_p3);
    xor_ln24_fu_594_p2 <= (zext_ln24_4_fu_590_p1 xor or_ln24_1_fu_572_p3);
    xor_ln38_1_fu_839_p2 <= (xor_ln38_fu_833_p2 xor or_ln38_2_fu_825_p3);
    xor_ln38_2_fu_851_p2 <= (f_fu_192 xor ap_const_lv32_FFFFFFFF);
    xor_ln38_3_fu_863_p2 <= (and_ln38_fu_845_p2 xor and_ln38_1_fu_857_p2);
    xor_ln38_fu_833_p2 <= (or_ln38_1_fu_803_p3 xor or_ln1_fu_781_p3);
    xor_ln39_1_fu_965_p2 <= (xor_ln39_fu_959_p2 xor or_ln39_2_fu_951_p3);
    xor_ln39_2_fu_971_p2 <= (d_1_fu_200 xor c_fu_204);
    xor_ln39_3_fu_989_p2 <= (and_ln39_fu_977_p2 xor and_ln39_1_fu_983_p2);
    xor_ln39_fu_959_p2 <= (or_ln39_1_fu_929_p3 xor or_ln2_fu_907_p3);
    xor_ln68_fu_1066_p2 <= (r_reg_430 xor ap_const_lv3_4);
    zext_ln24_1_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_1_fu_498_p2),64));
    zext_ln24_2_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_2_fu_509_p2),64));
    zext_ln24_3_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_3_fu_520_p2),64));
    zext_ln24_4_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln24_2_fu_580_p4),32));
    zext_ln24_5_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln24_5_fu_650_p4),32));
    zext_ln24_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_487_p2),64));
    zext_ln67_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln67_fu_1047_p2),32));
    zext_ln68_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln68_fu_1066_p2),64));
    zext_ln69_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln3_fu_1077_p3),64));
    zext_ln70_fu_1098_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln70_fu_1095_p1),64));
    zext_ln71_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln4_fu_1107_p3),64));
    zext_ln72_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_fu_1120_p2),64));
    zext_ln73_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln73_fu_1131_p1),64));
    zext_ln74_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln74_fu_1139_p1),64));
end behav;
